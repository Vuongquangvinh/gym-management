import { PayOS } from "@payos/node";
import dotenv from "dotenv";
import crypto from "crypto";
import admin from "../../config/firebase.js";

dotenv.config();

// Kh·ªüi t·∫°o PayOS v·ªõi c√∫ ph√°p m·ªõi (v2.0.3)
const payos = new PayOS({
  clientId:
    process.env.PAYOS_CLIENT_ID || "b1b21a16-5702-4a8e-8edc-5d522e01fbaa",
  apiKey: process.env.PAYOS_API_KEY || "82b21927-188b-4cd6-8e2d-f73395520f90",
  checksumKey:
    process.env.PAYOS_CHECKSUM_KEY ||
    "58375fd73a9c560b9f599de64c5341c68f41cc5e7193aa4272baea14133a2fcf",
});

/**
 * T·∫°o payment link cho g√≥i t·∫≠p gym
 * @param {Object} paymentData - D·ªØ li·ªáu thanh to√°n
 * @param {number} paymentData.amount - S·ªë ti·ªÅn thanh to√°n
 * @param {string} paymentData.description - M√¥ t·∫£ thanh to√°n
 * @param {string} paymentData.returnUrl - URL chuy·ªÉn h∆∞·ªõng sau thanh to√°n
 * @param {string} paymentData.cancelUrl - URL chuy·ªÉn h∆∞·ªõng khi h·ªßy
 * @param {number} paymentData.orderCode - M√£ ƒë∆°n h√†ng (unique)
 * @param {Object} paymentData.buyerInfo - Th√¥ng tin ng∆∞·ªùi mua
 * @param {Object} paymentData.metadata - Metadata b·ªï sung
 */
export async function createGymPackagePayment({
  amount,
  description,
  returnUrl,
  cancelUrl,
  orderCode,
  buyerInfo = {},
  metadata = {},
}) {
  try {
    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!amount || amount < 1000) {
      throw new Error("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 1,000 VNƒê");
    }

    if (!description) {
      throw new Error("M√¥ t·∫£ thanh to√°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }

    if (!returnUrl) {
      throw new Error("Return URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }

    if (!orderCode) {
      throw new Error("M√£ ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }

    // T·∫°o body request
    const paymentBody = {
      orderCode: Number(orderCode),
      amount: Number(amount),
      description: description,
      returnUrl: returnUrl,
      cancelUrl: cancelUrl || returnUrl,
    };

    // Th√™m th√¥ng tin ng∆∞·ªùi mua n·∫øu c√≥
    if (buyerInfo.name || buyerInfo.email || buyerInfo.phone) {
      paymentBody.buyerName = buyerInfo.name;
      paymentBody.buyerEmail = buyerInfo.email;
      paymentBody.buyerPhone = buyerInfo.phone;
    }

    console.log("Creating payment with data:", paymentBody);

    // T·∫°o payment link v·ªõi PayOS
    const result = await payos.paymentRequests.create(paymentBody);

    console.log("‚úÖ Payment link created successfully:", result);

    // üî• SAVE ORDER INFO TO FIRESTORE
    try {
      await saveOrderInfo({
        orderCode: Number(orderCode),
        userId: metadata.userId,
        userName: buyerInfo.name,
        userEmail: buyerInfo.email,
        packageId: metadata.packageId,
        packageName: metadata.packageName,
        packageDuration: metadata.packageDuration,
        amount: amount,
        status: "PENDING",
      });
    } catch (saveError) {
      console.error(
        "‚ö†Ô∏è Warning: Failed to save order to Firestore:",
        saveError.message
      );
      console.error(
        "Payment link created but order not saved. Webhook will still work."
      );
      // Don't throw error - payment link is still valid
    }

    // üîç LOG QR CODE INFORMATION
    console.log("üîç Checking QR Code data:");
    console.log("  - result.qrCode:", result.qrCode);
    console.log("  - Has qrCode:", !!result.qrCode);

    // T·∫°o QR code URL t·ª´ VietQR
    const qrCodeUrl =
      result.qrCode ||
      `https://img.vietqr.io/image/970436-113366668888-compact2.png?amount=${amount}&addInfo=${encodeURIComponent(
        description
      )}`;

    console.log("  - Final qrCode URL:", qrCodeUrl);

    // Tr·∫£ v·ªÅ th√¥ng tin payment
    const responseData = {
      success: true,
      checkoutUrl: result.checkoutUrl,
      paymentLinkId: result.paymentLinkId,
      orderCode: result.orderCode,
      qrCode: qrCodeUrl,
      amount: amount,
      description: description,
      // Th√™m th√¥ng tin ƒë·ªÉ Flutter t·ª± t·∫°o QR n·∫øu c·∫ßn
      bankCode: "970436", // M√£ ng√¢n h√†ng (v√≠ d·ª•: Vietcombank)
      accountNumber: "113366668888", // S·ªë t√†i kho·∫£n nh·∫≠n ti·ªÅn
      accountName: "GYM MANAGEMENT", // T√™n t√†i kho·∫£n
      metadata: {
        ...metadata,
        createdAt: new Date().toISOString(),
      },
    };

    console.log("üì§ Returning response data:");
    console.log(JSON.stringify(responseData, null, 2));

    return responseData;
  } catch (error) {
    console.error("‚ùå Error creating PayOS payment link:", error);
    throw {
      success: false,
      message: error.message || "L·ªói khi t·∫°o link thanh to√°n",
      code: error.code || "PAYMENT_ERROR",
    };
  }
}

/**
 * X√°c th·ª±c webhook t·ª´ PayOS
 */
export async function verifyPaymentWebhook(webhookData) {
  try {
    const result = await payos.webhooks.verify(webhookData);
    return {
      success: true,
      data: result,
    };
  } catch (error) {
    console.error("‚ùå Error verifying webhook:", error);
    throw {
      success: false,
      message: "Webhook verification failed",
      error: error.message,
    };
  }
}

/**
 * L·∫•y th√¥ng tin thanh to√°n theo orderCode
 */
export async function getPaymentInfo(orderCode) {
  try {
    const result = await payos.paymentRequests.get(orderCode);
    return {
      success: true,
      data: result,
    };
  } catch (error) {
    console.error("‚ùå Error getting payment info:", error);
    throw {
      success: false,
      message: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thanh to√°n",
      error: error.message,
    };
  }
}

/**
 * H·ªßy thanh to√°n
 */
export async function cancelPayment(orderCode, cancellationReason) {
  try {
    const result = await payos.paymentRequests.cancel(
      orderCode,
      cancellationReason
    );
    return {
      success: true,
      data: result,
    };
  } catch (error) {
    console.error("‚ùå Error canceling payment:", error);
    throw {
      success: false,
      message: "Kh√¥ng th·ªÉ h·ªßy thanh to√°n",
      error: error.message,
    };
  }
}

/**
 * üîê Verify webhook signature from PayOS
 */
export function verifyWebhookData(webhookBody) {
  try {
    const { data, signature } = webhookBody;

    if (!data || !signature) {
      console.error("‚ùå Missing data or signature in webhook");
      return null;
    }

    // Sort data keys and create signature string
    const sortedDataStr = sortObjDataByKey(data);

    // Create HMAC signature using checksum key
    const checksumKey =
      process.env.PAYOS_CHECKSUM_KEY ||
      "58375fd73a9c560b9f599de64c5341c68f41cc5e7193aa4272baea14133a2fcf";

    const calculatedSignature = crypto
      .createHmac("sha256", checksumKey)
      .update(sortedDataStr)
      .digest("hex");

    // Verify signature
    if (calculatedSignature !== signature) {
      console.error("‚ùå Invalid webhook signature");
      console.error("Expected:", calculatedSignature);
      console.error("Received:", signature);
      return null;
    }

    console.log("‚úÖ Webhook signature verified");
    return webhookBody;
  } catch (error) {
    console.error("‚ùå Verify webhook error:", error);
    return null;
  }
}

/**
 * üìù Sort object keys recursively for signature verification
 */
function sortObjDataByKey(object) {
  const orderedObject = Object.keys(object)
    .sort()
    .reduce((obj, key) => {
      obj[key] = object[key];
      return obj;
    }, {});
  return JSON.stringify(orderedObject);
}

/**
 * üíæ Save order info to Firestore
 */
export async function saveOrderInfo(orderData) {
  try {
    console.log(
      "üìù Attempting to save order to Firestore:",
      orderData.orderCode
    );

    // Check if admin is initialized
    if (!admin.apps || admin.apps.length === 0) {
      throw new Error("Firebase Admin SDK is not initialized");
    }

    const db = admin.firestore();
    console.log("‚úÖ Firestore instance obtained");

    const orderRef = db
      .collection("payment_orders")
      .doc(orderData.orderCode.toString());

    // üî• Lo·∫°i b·ªè c√°c field undefined tr∆∞·ªõc khi l∆∞u v√†o Firestore
    const cleanOrderData = {};
    Object.keys(orderData).forEach((key) => {
      if (orderData[key] !== undefined) {
        cleanOrderData[key] = orderData[key];
      }
    });

    await orderRef.set({
      ...cleanOrderData,
      status: "PENDING",
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
    });

    console.log(
      "‚úÖ Order saved to Firestore successfully:",
      orderData.orderCode
    );
    return true;
  } catch (error) {
    console.error("‚ùå Save order error:", error);
    console.error("Error details:", {
      message: error.message,
      code: error.code,
      stack: error.stack,
    });
    throw error;
  }
}

/**
 * üîç Get order by order code from Firestore
 */
export async function getOrderByCode(orderCode) {
  try {
    const db = admin.firestore();
    const orderDoc = await db
      .collection("payment_orders")
      .doc(orderCode.toString())
      .get();

    if (!orderDoc.exists) {
      console.log("‚ùå Order not found:", orderCode);
      return null;
    }

    const data = orderDoc.data();
    console.log("‚úÖ Order found:", orderCode);
    return { id: orderDoc.id, ...data };
  } catch (error) {
    console.error("‚ùå Get order error:", error);
    throw error;
  }
}

/**
 * üîÑ Update order status in Firestore
 */
export async function updateOrderStatus(orderCode, updateData) {
  try {
    const db = admin.firestore();
    await db
      .collection("payment_orders")
      .doc(orderCode.toString())
      .update({
        ...updateData,
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      });

    console.log("‚úÖ Order status updated:", orderCode, updateData.status);
    return true;
  } catch (error) {
    console.error("‚ùå Update order error:", error);
    throw error;
  }
}
