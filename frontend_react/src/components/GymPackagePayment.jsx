// src/components/GymPackagePayment.jsx
import React, { useState } from 'react';
import { createGymPayment } from '../services/paymentService';
import { toast } from 'react-toastify';
import './GymPackagePayment.css';

/**
 * Component thanh to√°n g√≥i t·∫≠p gym
 * @param {Object} props
 * @param {Object} props.packageInfo - Th√¥ng tin g√≥i t·∫≠p {id, name, price, duration}
 * @param {Object} props.userInfo - Th√¥ng tin user {id, name, email, phone}
 * @param {Function} props.onSuccess - Callback khi thanh to√°n th√†nh c√¥ng
 * @param {Function} props.onError - Callback khi c√≥ l·ªói
 */
function GymPackagePayment({ packageInfo, userInfo, onSuccess, onError }) {
  const [loading, setLoading] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);

  const handlePaymentClick = () => {
    setShowConfirm(true);
  };

  const handleConfirmPayment = async () => {
    setLoading(true);
    setShowConfirm(false);

    try {
      const response = await createGymPayment({
        packageId: packageInfo.id || packageInfo.PackageId,
        packageName: packageInfo.name || packageInfo.PackageName,
        packagePrice: packageInfo.price || packageInfo.Price,
        packageDuration: packageInfo.duration || packageInfo.Duration,
        userId: userInfo.id || userInfo._id,
        userName: userInfo.name || userInfo.full_name,
        userEmail: userInfo.email,
        userPhone: userInfo.phone || userInfo.phone_number,
      });

      if (response.success && response.data.checkoutUrl) {
        toast.success('ƒêang chuy·ªÉn ƒë·∫øn trang thanh to√°n...');
        
        // L∆∞u th√¥ng tin v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng sau
        localStorage.setItem('pendingPayment', JSON.stringify({
          orderCode: response.data.orderCode,
          packageInfo: packageInfo,
          createdAt: new Date().toISOString(),
        }));

        // Callback tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng
        if (onSuccess) {
          onSuccess(response.data);
        }

        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n PayOS
        setTimeout(() => {
          window.location.href = response.data.checkoutUrl;
        }, 500);
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o link thanh to√°n');
      }
    } catch (error) {
      console.error('Payment error:', error);
      toast.error(error.message || 'C√≥ l·ªói x·∫£y ra khi thanh to√°n');
      
      if (onError) {
        onError(error);
      }
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(price);
  };

  return (
    <>
      <div className="gym-package-payment">
        <div className="package-details">
          <h3 className="package-name">
            {packageInfo.name || packageInfo.PackageName}
          </h3>
          <div className="package-info">
            <div className="info-item">
              <span className="label">Gi√°:</span>
              <span className="value price">
                {formatPrice(packageInfo.price || packageInfo.Price)}
              </span>
            </div>
            <div className="info-item">
              <span className="label">Th·ªùi h·∫°n:</span>
              <span className="value">
                {packageInfo.duration || packageInfo.Duration} ng√†y
              </span>
            </div>
            {packageInfo.description || packageInfo.Description ? (
              <div className="info-item full-width">
                <span className="label">M√¥ t·∫£:</span>
                <span className="value">
                  {packageInfo.description || packageInfo.Description}
                </span>
              </div>
            ) : null}
          </div>
        </div>

        <button
          className="btn-payment"
          onClick={handlePaymentClick}
          disabled={loading}
        >
          {loading ? (
            <>
              <span className="spinner"></span>
              ƒêang x·ª≠ l√Ω...
            </>
          ) : (
            <>
              <span className="icon">üí≥</span>
              Thanh to√°n ngay
            </>
          )}
        </button>
      </div>

      {/* Confirmation Modal */}
      {showConfirm && (
        <div className="payment-modal-overlay" onClick={() => setShowConfirm(false)}>
          <div className="payment-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>X√°c nh·∫≠n thanh to√°n</h3>
              <button
                className="close-btn"
                onClick={() => setShowConfirm(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thanh to√°n g√≥i t·∫≠p:</p>
              <div className="confirm-details">
                <p><strong>{packageInfo.name || packageInfo.PackageName}</strong></p>
                <p>Gi√°: <strong>{formatPrice(packageInfo.price || packageInfo.Price)}</strong></p>
                <p>Th·ªùi h·∫°n: <strong>{packageInfo.duration || packageInfo.Duration} ng√†y</strong></p>
              </div>
            </div>
            <div className="modal-footer">
              <button
                className="btn-cancel"
                onClick={() => setShowConfirm(false)}
                disabled={loading}
              >
                H·ªßy
              </button>
              <button
                className="btn-confirm"
                onClick={handleConfirmPayment}
                disabled={loading}
              >
                {loading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n'}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

export default GymPackagePayment;
