import React, { useState } from "react";
import ReactDOM from "react-dom";
import "./DetailMember.css";

export default function DetailMember({ user, isOpen, onClose, onUpdate }) {
  if (!isOpen || !user) return null;

  const [editedUser, setEditedUser] = useState(null);
  const [editModes, setEditModes] = useState({});
  const [successMessage, setSuccessMessage] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const formatDate = (dateString) => dateString ? new Date(dateString).toLocaleDateString('vi-VN') : '';
  const formatDateTime = (dateString) => dateString ? new Date(dateString).toLocaleDateString('vi-VN', { hour: '2-digit', minute: '2-digit' }) : '';

  const handleEditToggle = (section) => {
    const newEditMode = !editModes[section];
    setEditModes(prev => ({ ...prev, [section]: newEditMode }));
    if (newEditMode && !editedUser) {
      setEditedUser({ ...user });
    }
    setSuccessMessage("");
    setErrorMessage("");
  };

  const handleSave = async (section) => {
    setSuccessMessage("");
    setErrorMessage("");
    try {
      if (onUpdate && editedUser) {
        await onUpdate(editedUser);
        setEditModes(prev => ({ ...prev, [section]: false }));
        setEditedUser(null);
        setSuccessMessage("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      }
    } catch (err) {
      console.log("üöÄ ~ handleSave ~ err:", err)
      setErrorMessage("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  const handleCancel = (section) => {
    setEditModes(prev => ({ ...prev, [section]: false }));
    setEditedUser(null);
    setSuccessMessage("");
    setErrorMessage("");
  };

  const getFieldValue = (field) => editedUser?.[field] ?? user[field];

  const getArrayFieldValue = (field) => {
    const val = getFieldValue(field);
    return Array.isArray(val) ? val.join(", ") : '';
  };

  const updateArrayField = (field, value) => {
    const items = value.split(",").map(item => item.trim()).filter(Boolean);
    setEditedUser(prev => ({ ...prev, [field]: items }));
  };

  const getDateValueForInput = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toISOString().split('T')[0];
  };

  // N·ªôi dung popup
  const popupContent = (
    <div className="popup-overlay">
      <div className="detailmember-card">
        <div className="detailmember-header">
          <h2>Th√¥ng tin h·ªôi vi√™n</h2>
          <button className="detailmember-close" onClick={onClose}>√ó</button>
        </div>
        <div style={{ padding: '18px 32px 0 32px' }}>
          {successMessage && <div className="form-success">{successMessage}</div>}
          {errorMessage && <div className="form-error">{errorMessage}</div>}
        </div>
        <div className="detailmember-main-content">
          {/* Left Column */}
          <div className="detailmember-column left-column">
            {/* Avatar and Basic Info */}
            
            <div className="detailmember-profile-section">
              <div className="detailmember-avatar">
              
                  <label style={{ width: '100%' }}>
                    {user.avatar_url ? (
                      <img src={user.avatar_url} alt="avatar" />
                  ) : (
                    <div className="detailmember-avatar-placeholder">No Image</div>
                  )}</label>
              </div>
              <div className="detailmember-basic-info">
                {editModes.profile ? (
                  <>

                    
                    <input
                      type="text"
                      value={getFieldValue('full_name') || ''}
                      onChange={e => setEditedUser(prev => ({ ...prev, full_name: e.target.value }))}
                      className="edit-input"
                      placeholder="H·ªç v√† t√™n"
                      style={{ marginBottom: 8 }}
                    />
                     <label className="field">
                    <input
                      type="email"
                      value={getFieldValue('email') || ''}
                      onChange={e => setEditedUser(prev => ({ ...prev, email: e.target.value }))}
                      className="edit-input"
                      placeholder="Email"
                      style={{ marginBottom: 8 }}
                    />
                    </label>
                    <label className="field">
                    <input
                      type="text"
                      value={getFieldValue('phone_number') || ''}
                      onChange={e => setEditedUser(prev => ({ ...prev, phone_number: e.target.value }))}
                      className="edit-input"
                      placeholder="S·ªë ƒëi·ªán tho·∫°i"
                      style={{ marginBottom: 8 }}
                    /></label>
                  </>
                ) : (
                  <>
                    <h3 className="detailmember-fullname">{user.full_name}</h3>
                    <p className="detailmember-role">H·ªôi vi√™n Gym</p>
                    <div className="detailmember-contact">
                      <div className="contact-item">
                        <span className="contact-label">Email:</span>
                        <span className="contact-value">{user.email}</span>
                      </div>
                      <div className="contact-item">
                        <span className="contact-label">SƒêT:</span>
                        <span className="contact-value">{user.phone_number}</span>
                      </div>
                    </div>
                  </>
                )}
              </div>
              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end', flex: 1 }}>
                <button className="section-edit" onClick={() => handleEditToggle('profile')}>‚úèÔ∏è</button>
                {editModes.profile && (
                  <div className="section-actions" style={{ marginTop: 8 }}>
                    <button className="cancel-btn" onClick={() => handleCancel('profile')}>H·ªßy</button>
                    <button className="update-btn" onClick={() => handleSave('profile')}>C·∫≠p nh·∫≠t</button>
                  </div>
                )}
              </div>
            </div>

            {/* Section 1: Th√¥ng tin ƒê·ªãnh danh & Li√™n h·ªá */}
            <div className="detailmember-section compact-section">
              <div className="section-header">
                <h4>1. Th√¥ng tin ƒê·ªãnh danh & Li√™n h·ªá</h4>
                <button className="section-edit" onClick={() => handleEditToggle('identification')}>‚úèÔ∏è</button>
              </div>
              <div className="section-grid">
                <div className="grid-item">
                  <span className="item-label">Gi·ªõi t√≠nh:</span>
                  {editModes.identification ? (
                      <label className="field">
                      <select 
                      value={getFieldValue('gender') || ''} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, gender: e.target.value }))} 
                      className="edit-input"
                    >
                      <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                      <option value="male">Nam</option>
                      <option value="female">N·ªØ</option>
                      <option value="other">Kh√°c</option>
                    </select>
                      </label>
                  
                  ) : (
                    <span className="item-value">{getFieldValue('gender') === "male" ? "Nam" : getFieldValue('gender') === "female" ? "N·ªØ" : "Kh√°c"}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">Ng√†y sinh:</span>
                  {editModes.identification ? (
                    <label className="field">
                      <input
                        type="date"
                        value={getDateValueForInput(getFieldValue('date_of_birth'))}
                        onChange={(e) => setEditedUser(prev => ({ ...prev, date_of_birth: e.target.value }))}
                        className="edit-input"
                      />
                    </label>
                  ) : (
                    <span className="item-value">{formatDate(getFieldValue('date_of_birth'))}</span>
                  )}
                </div>
                {/* Th√™m ƒë·ªãa ch·ªâ n·∫øu c√≥
                {user.address && (
                  <div className="grid-item full-width">
                    <span className="item-label">ƒê·ªãa ch·ªâ:</span>
                    {editModes.identification ? (
                      <label className="field">
                        <input
                          type="text"
                          value={getFieldValue('address') || ''}
                          onChange={(e) => setEditedUser(prev => ({ ...prev, address: e.target.value }))}
                          className="edit-input"
                        />
                      </label>
                  ) : (
                    <span className="item-value">{formatDate(getFieldValue('date_of_birth'))}</span>
                  )}
                </div>
                {/* Th√™m ƒë·ªãa ch·ªâ n·∫øu c√≥
                {user.address && (
                  <div className="grid-item full-width">
                    <span className="item-label">ƒê·ªãa ch·ªâ:</span>
                    <span className="item-value">{user.address}</span>
                  </div>
                )} */}
              </div>
              {editModes.identification && (
                <div className="section-actions">
                  <button className="cancel-btn" onClick={() => handleCancel('identification')}>H·ªßy</button>
                  <button className="update-btn" onClick={() => handleSave('identification')}>C·∫≠p nh·∫≠t</button>
                </div>
              )}
            </div>

            {/* Section 3: Th√¥ng tin S·ª©c kh·ªèe & M·ª•c ti√™u */}
            <div className="detailmember-section compact-section">
              <div className="section-header">
                <h4>3. Th√¥ng tin S·ª©c kh·ªèe & M·ª•c ti√™u</h4>
                <button className="section-edit" onClick={() => handleEditToggle('health')}>‚úèÔ∏è</button>
              </div>
              <div className="section-grid">
                <div className="grid-item full-width">
                  <span className="item-label">M·ª•c ti√™u t·∫≠p luy·ªán:</span>
                  {editModes.health ? (
                    <label className="field">
                    <textarea 
                      value={getArrayFieldValue('fitness_goal')} 
                      onChange={(e) => updateArrayField('fitness_goal', e.target.value)} 
                      className="edit-input full-width-textarea" 
                      rows={2}
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getArrayFieldValue('fitness_goal') || 'Ch∆∞a x√°c ƒë·ªãnh'}</span>
                  )}
                </div>
                <div className="grid-item full-width">
                  <span className="item-label">T√¨nh tr·∫°ng s·ª©c kh·ªèe:</span>
                  {editModes.health ? (
                    <label className="field">
                    <textarea 
                      value={getArrayFieldValue('medical_conditions')} 
                      onChange={(e) => updateArrayField('medical_conditions', e.target.value)} 
                      className="edit-input full-width-textarea" 
                      rows={2}
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getArrayFieldValue('medical_conditions') || 'Kh√¥ng c√≥'}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">Chi·ªÅu cao (cm):</span>
                  {editModes.health ? (
                    <label className="field">
                    <input 
                      type="number" 
                      value={getFieldValue('initial_measurements')?.height || ''} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, initial_measurements: { ...prev.initial_measurements, height: parseFloat(e.target.value) || 0 } }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getFieldValue('initial_measurements')?.height || ''}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">C√¢n n·∫∑ng (kg):</span>
                  {editModes.health ? (
                    <label className="field">
                    <input 
                      type="number" 
                      value={getFieldValue('initial_measurements')?.weight || ''} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, initial_measurements: { ...prev.initial_measurements, weight: parseFloat(e.target.value) || 0 } }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getFieldValue('initial_measurements')?.weight || ''}</span>
                  )}
                </div>
              </div>
              {editModes.health && (
                <div className="section-actions">
                  <button className="cancel-btn" onClick={() => handleCancel('health')}>H·ªßy</button>
                  <button className="update-btn" onClick={() => handleSave('health')}>C·∫≠p nh·∫≠t</button>
                </div>
              )}
            </div>
          </div>

          {/* Right Column */}
          <div className="detailmember-column right-column">
            {/* Section 2: Th√¥ng tin Qu·∫£n l√Ω G√≥i t·∫≠p */}
            <div className="detailmember-section compact-section">
              <div className="section-header">
                <h4>2. Th√¥ng tin Qu·∫£n l√Ω G√≥i t·∫≠p</h4>
                <button className="section-edit" onClick={() => handleEditToggle('package')}>‚úèÔ∏è</button>
              </div>
              <div className="section-grid">
                <div className="grid-item">
                  <span className="item-label">G√≥i t·∫≠p hi·ªán t·∫°i:</span>
                  {editModes.package ? (
                    <label className="field">
                    <input 
                      type="text" 
                      value={getFieldValue('current_package_id') || ''} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, current_package_id: e.target.value }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getFieldValue('current_package_id') || 'Ch∆∞a c√≥'}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">Tr·∫°ng th√°i th√†nh vi√™n:</span>
                  {editModes.package ? (
                   <label className="field">
                      <select
                        value={getFieldValue('membership_status') || ''}
                        onChange={(e) => setEditedUser(prev => ({ ...prev, membership_status: e.target.value }))}
                        className="edit-input"
                      >
                        <option value="">Ch·ªçn tr·∫°ng th√°i</option>
                        <option value="Active">Ho·∫°t ƒë·ªông</option>
                        <option value="Expired">H·∫øt h·∫°n</option>
                        <option value="Frozen">T·∫°m d·ª´ng</option>
                        <option value="Trial">D√πng th·ª≠</option>
                      </select>
                    </label>
                  ) : (
                    <span className="item-value">{getFieldValue('membership_status') || 'Ho·∫°t ƒë·ªông'}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">Ng√†y h·∫øt h·∫°n:</span>
                  {editModes.package ? (
                    <label className="field">
                    <input 
                      type="date" 
                      value={getDateValueForInput(getFieldValue('package_end_date'))} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, package_end_date: e.target.value }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{formatDate(getFieldValue('package_end_date'))}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">S·ªë bu·ªïi c√≤n l·∫°i:</span>
                  {editModes.package ? (
                    <label className="field">
                    <input 
                      type="number" 
                      value={getFieldValue('remaining_sessions') ?? ''} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, remaining_sessions: parseInt(e.target.value) || 0 }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getFieldValue('remaining_sessions') !== null && getFieldValue('remaining_sessions') !== undefined ? getFieldValue('remaining_sessions') : ''}</span>
                  )}
                </div>
              
              </div>
              {editModes.package && (
                <div className="section-actions">
                  <button className="cancel-btn" onClick={() => handleCancel('package')}>H·ªßy</button>
                  <button className="update-btn" onClick={() => handleSave('package')}>C·∫≠p nh·∫≠t</button>
                </div>
              )}
            </div>

            {/* Section 4: Th√¥ng tin H·ªá th·ªëng & N·ªôi b·ªô */}
            <div className="detailmember-section compact-section">
              <div className="section-header">
                <h4>4. Th√¥ng tin H·ªá th·ªëng & N·ªôi b·ªô</h4>
                <button className="section-edit" onClick={() => handleEditToggle('system')}>‚úèÔ∏è</button>
              </div>
              <div className="section-grid">
                <div className="grid-item">
                  <span className="item-label">Ng√†y ƒëƒÉng k√Ω:</span>
                  {editModes.system ? (
                      <label className="field">
                    <input 
                      type="date" 
                      value={getDateValueForInput(getFieldValue('join_date'))} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, join_date: e.target.value }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{formatDate(getFieldValue('join_date'))}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">Nh√¢n vi√™n ph·ª• tr√°ch:</span>
                  {editModes.system ? (
                      <label className="field">
                    <input 
                      type="text" 
                      value={getFieldValue('assigned_staff_id') || ''} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, assigned_staff_id: e.target.value }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getFieldValue('assigned_staff_id') || 'Ch∆∞a ch·ªâ ƒë·ªãnh'}</span>
                  )}
                </div>
                <div className="grid-item">
                  <span className="item-label">Ngu·ªìn Lead:</span>
                  {editModes.system ? (
                    <label className="field">
                    <input 
                      type="text" 
                      value={getFieldValue('lead_source') || ''} 
                      onChange={(e) => setEditedUser(prev => ({ ...prev, lead_source: e.target.value }))} 
                      className="edit-input" 
                    />
                    </label>
                  ) : (
                    <span className="item-value">{getFieldValue('lead_source') || 'Kh√¥ng x√°c ƒë·ªãnh'}</span>
                  )}
                </div>
                {user.branch_id && (
                  <div className="grid-item">
                    <span className="item-label">Chi nh√°nh:</span>
                    {editModes.system ? (
                      <label className="field">
                      <input 
                        type="text" 
                        value={getFieldValue('branch_id') || ''} 
                        onChange={(e) => setEditedUser(prev => ({ ...prev, branch_id: e.target.value }))} 
                        className="edit-input" 
                      />
                      </label>
                      
                    ) : (
                      <span className="item-value">{getFieldValue('branch_id')}</span>
                    )}
                  </div>
                )}
                <div className="grid-item full-width">
                  <span className="item-label">Check-in g·∫ßn nh·∫•t:</span>
                  <span className="item-value">{formatDateTime(getFieldValue('last_checkin_time'))}</span>
                </div>
                <div className="grid-item full-width">
                  <span className="item-label">L·ªãch s·ª≠ t·∫°m d·ª´ng:</span>
                  <span className="item-value">
                    {getFieldValue('frozen_history') && getFieldValue('frozen_history').length ? 
                      getFieldValue('frozen_history').map((item, idx) => (
                        <div key={idx} className="history-item">
                          {formatDate(item.start)} - {formatDate(item.end)}
                        </div>
                      )) : "Kh√¥ng c√≥"}
                  </span>
                </div>
              </div>
              {editModes.system && (
                <div className="section-actions">
                  <button className="cancel-btn" onClick={() => handleCancel('system')}>H·ªßy</button>
                  <button className="update-btn" onClick={() => handleSave('system')}>C·∫≠p nh·∫≠t</button>
                </div>
              )}
            </div>

            {/* Audit Info */}
            <div className="detailmember-audit compact-audit">
              <div className="audit-item">
                <span className="audit-label">Ng√†y t·∫°o:</span>
                <span className="audit-value">{formatDateTime(user.createdAt)}</span>
              </div>
              <div className="audit-item">
                <span className="audit-label">Ng√†y c·∫≠p nh·∫≠t:</span>
                <span className="audit-value">{formatDateTime(user.updatedAt)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return ReactDOM.createPortal(popupContent, document.body);
}