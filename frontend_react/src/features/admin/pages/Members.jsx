import React, { useEffect, useState } from 'react';
import DataTableMember from '../components/DataTableMember.jsx';
import AuthService from '../../../firebase/lib/features/auth/authService.js';

export default function Members() {
  const [paymentStatus, setPaymentStatus] = useState(null);

  useEffect(() => {
    // Ki·ªÉm tra xem c√≥ payment status trong URL kh√¥ng
    const urlParams = new URLSearchParams(window.location.search);
    
    // PayOS tr·∫£ v·ªÅ v·ªõi format: ?code=00&status=PAID&orderCode=xxx
    const paymentStatus = urlParams.get('status');
    const orderCode = urlParams.get('orderCode');
    const cancelFlag = urlParams.get('cancel');
    const cancelled = urlParams.get('cancelled');
    const userId = urlParams.get('userId');
    
    console.log('üîç URL params:', {
      paymentStatus,
      orderCode,
      cancelFlag,
      cancelled,
      userId,
      allParams: Object.fromEntries(urlParams)
    });

    // Ki·ªÉm tra thanh to√°n th√†nh c√¥ng: status=PAID ho·∫∑c payment=success
    if (paymentStatus === 'PAID' || urlParams.get('payment') === 'success') {
      console.log('‚úÖ Ph√°t hi·ªán thanh to√°n th√†nh c√¥ng!');
      handlePaymentSuccess(userId, orderCode);
    } else if (cancelled === 'true' || cancelFlag === 'true' || urlParams.get('payment') === 'cancel') {
      console.log('‚ùå Thanh to√°n b·ªã h·ªßy, ƒëang x√≥a user...');
      handlePaymentCancel(userId);
    } else {
      console.log('‚ÑπÔ∏è Kh√¥ng c√≥ params thanh to√°n trong URL');
    }
  }, []);

  const handlePaymentSuccess = async (userId, orderCode) => {
    try {
      console.log('üí∞ X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng cho userId:', userId);
      console.log('üìù OrderCode:', orderCode);
      
      // üî• B∆Ø·ªöC 1: G·ªçi API ƒë·ªÉ x√°c nh·∫≠n thanh to√°n v√† c·∫≠p nh·∫≠t users collection
      if (!orderCode) {
        // L·∫•y t·ª´ localStorage n·∫øu kh√¥ng c√≥ trong URL
        orderCode = localStorage.getItem('pendingPaymentOrderCode');
      }
      
      if (orderCode) {
        console.log('üîÑ ƒêang g·ªçi API x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng...');
        
        const response = await fetch('/api/payos/confirm-payment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            orderCode: Number(orderCode)
          })
        });
        
        const result = await response.json();
        console.log('üì¶ K·∫øt qu·∫£ x√°c nh·∫≠n thanh to√°n:', result);
        
        if (!result.success) {
          throw new Error(result.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n thanh to√°n');
        }
        
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin g√≥i t·∫≠p cho user trong collection users!');
      } else {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y orderCode ƒë·ªÉ x√°c nh·∫≠n thanh to√°n');
      }
      
      // B∆Ø·ªöC 2: X√≥a d·ªØ li·ªáu t·∫°m
      localStorage.removeItem('pendingPaymentUserId');
      localStorage.removeItem('pendingPaymentOrderCode');
      localStorage.removeItem('pendingUserData');
      
      // B∆Ø·ªöC 3: Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      setPaymentStatus({ 
        success: true, 
        message: '‚úÖ Thanh to√°n th√†nh c√¥ng! G√≥i t·∫≠p ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho h·ªôi vi√™n.' 
      });
      
      // X√≥a query params kh·ªèi URL
      window.history.replaceState({}, '', '/admin/members');
      
      // Reload trang sau 2 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã user m·ªõi v·ªõi g√≥i t·∫≠p
      setTimeout(() => {
        window.location.reload();
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω thanh to√°n:', error);
      setPaymentStatus({ 
        success: false, 
        message: '‚ö†Ô∏è ƒê√£ c√≥ l·ªói x·∫£y ra: ' + error.message 
      });
    }
  };

  const handlePaymentCancel = async (userId) => {
    try {
      console.log('üóëÔ∏è X·ª≠ l√Ω h·ªßy thanh to√°n, ƒëang x√≥a user:', userId);
      
      // L·∫•y userId t·ª´ localStorage n·∫øu kh√¥ng c√≥ trong URL
      const userIdToDelete = userId || localStorage.getItem('pendingPaymentUserId');
      
      if (userIdToDelete) {
        // X√≥a user ƒë√£ t·∫°o v√¨ payment b·ªã cancel
        await AuthService.deleteSpendingUser(userIdToDelete);
        console.log('‚úÖ ƒê√£ x√≥a spending user:', userIdToDelete);
      }
      
      // X√≥a d·ªØ li·ªáu t·∫°m
      localStorage.removeItem('pendingPaymentUserId');
      localStorage.removeItem('pendingPaymentOrderCode');
      localStorage.removeItem('pendingUserData'); // X√≥a d·ªØ li·ªáu c≈© n·∫øu c√≥
      
      setPaymentStatus({ 
        success: false, 
        message: '‚ùå Thanh to√°n ƒë√£ b·ªã h·ªßy. Th√¥ng tin h·ªôi vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a.' 
      });
      
      // X√≥a query params
      window.history.replaceState({}, '', '/admin/members');
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω cancel:', error);
      setPaymentStatus({ 
        success: false, 
        message: '‚ö†Ô∏è L·ªói khi x√≥a th√¥ng tin: ' + error.message 
      });
    }
  };

  // Dummy handlers for now
  const handleEdit = (user) => alert('S·ª≠a: ' + user.full_name);
  const handleDisable = (user) => alert((user.membership_status === 'Active' ? 'V√¥ hi·ªáu h√≥a: ' : 'K√≠ch ho·∫°t: ') + user.full_name);

  return (
    <div className="card">
      {paymentStatus && (
        <div 
          style={{
            padding: '15px',
            marginBottom: '15px',
            borderRadius: '4px',
            backgroundColor: paymentStatus.success ? '#d4edda' : '#f8d7da',
            color: paymentStatus.success ? '#155724' : '#721c24',
            border: `1px solid ${paymentStatus.success ? '#c3e6cb' : '#f5c6cb'}`
          }}
        >
          {paymentStatus.message}
        </div>
      )}
      <DataTableMember onEdit={handleEdit} onDisable={handleDisable} />
    </div>
  );
}
