import React, { useState } from "react";
import "./changePackageInformation.css";
import { PackageModel } from "../../../../firebase/lib/features/package/packages.model.js";

export default function ChangePackageInformation({ pkg, onSave, onCancel }) {
	const [form, setForm] = useState({
		PackageId: pkg.rawData?.PackageId || pkg.id || "",
		PackageName: pkg.rawData?.PackageName || pkg.name || "",
		PackageType: pkg.rawData?.PackageType || pkg.type || "",
		Duration: pkg.rawData?.Duration || (pkg.duration ? parseInt(pkg.duration) : ""),
		Price: pkg.rawData?.Price || (pkg.price ? parseInt(pkg.price.replace(/[^\d]/g, '')) : ""),
		Description: pkg.rawData?.Description || pkg.description || "",
		NumberOfSession: pkg.rawData?.NumberOfSession || pkg.sessions || "",
		Discount: pkg.rawData?.Discount || "",
		StartDayDiscount: pkg.rawData?.StartDayDiscount 
			? (pkg.rawData.StartDayDiscount instanceof Date 
				? pkg.rawData.StartDayDiscount.toISOString().split('T')[0]
				: "")
			: "",
		EndDayDiscount: pkg.rawData?.EndDayDiscount
			? (pkg.rawData.EndDayDiscount instanceof Date
				? pkg.rawData.EndDayDiscount.toISOString().split('T')[0]
				: "")
			: "",
		UsageCondition: pkg.rawData?.UsageCondition || pkg.promotion || "",
		Status: pkg.rawData?.Status || pkg.status || "active",
	});

	const [loading, setLoading] = useState(false);
	const [error, setError] = useState("");

	const handleChange = (e) => {
		const { name, value } = e.target;
		setForm((prev) => ({ ...prev, [name]: value }));
	};

	const handleSubmit = async (e) => {
		e.preventDefault();
		setError("");
		setLoading(true);

		try {
			// Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ update
			const dataToUpdate = {};

			// Ch·ªâ update c√°c field ƒë√£ thay ƒë·ªïi
			if (form.PackageName !== pkg.rawData?.PackageName) {
				dataToUpdate.PackageName = form.PackageName;
			}
			if (form.PackageType !== pkg.rawData?.PackageType) {
				dataToUpdate.PackageType = form.PackageType;
			}
			if (form.Description !== pkg.rawData?.Description) {
				dataToUpdate.Description = form.Description;
			}
			if (Number(form.Duration) !== pkg.rawData?.Duration) {
				dataToUpdate.Duration = Number(form.Duration);
			}
			if (Number(form.Price) !== pkg.rawData?.Price) {
				dataToUpdate.Price = Number(form.Price);
			}
			if (form.Status !== pkg.rawData?.Status) {
				dataToUpdate.Status = form.Status;
			}
			if (form.NumberOfSession && Number(form.NumberOfSession) !== pkg.rawData?.NumberOfSession) {
				dataToUpdate.NumberOfSession = Number(form.NumberOfSession);
			}

			// X·ª≠ l√Ω discount fields
			const hasDiscount = form.Discount && parseFloat(form.Discount) > 0;
			
			if (hasDiscount) {
				// Validate dates n·∫øu c√≥ discount
				if (!form.StartDayDiscount || !form.EndDayDiscount) {
					throw new Error("Vui l√≤ng nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c gi·∫£m gi√°.");
				}
				if (new Date(form.EndDayDiscount) < new Date(form.StartDayDiscount)) {
					throw new Error("Ng√†y k·∫øt th√∫c gi·∫£m gi√° ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu.");
				}

				dataToUpdate.Discount = Number(form.Discount);
				dataToUpdate.StartDayDiscount = new Date(form.StartDayDiscount);
				dataToUpdate.EndDayDiscount = new Date(form.EndDayDiscount);
				if (form.UsageCondition) {
					dataToUpdate.UsageCondition = form.UsageCondition;
				}
			} else {
				// N·∫øu kh√¥ng c√≥ discount, x√≥a c√°c fields li√™n quan
				dataToUpdate.Discount = null;
				dataToUpdate.StartDayDiscount = null;
				dataToUpdate.EndDayDiscount = null;
				dataToUpdate.UsageCondition = null;
			}

			// Lo·∫°i b·ªè c√°c field r·ªóng ho·∫∑c null
			Object.keys(dataToUpdate).forEach(key => {
				if (dataToUpdate[key] === "" || dataToUpdate[key] === undefined) {
					delete dataToUpdate[key];
				}
			});

			console.log("üì¶ Data to update:", dataToUpdate);
			console.log("üîë Firestore Document ID:", pkg.firestoreId || pkg.rawData?._firestoreId);
			console.log("üìù User Package ID:", pkg.id || pkg.rawData?.PackageId);

			// S·ª≠ d·ª•ng Firestore document ID ƒë·ªÉ update, KH√îNG ph·∫£i PackageId
			const firestoreDocId = pkg.firestoreId || pkg.rawData?._firestoreId;
			
			if (!firestoreDocId) {
				throw new Error("Kh√¥ng t√¨m th·∫•y Firestore document ID. Vui l√≤ng reload trang.");
			}

			// G·ªçi update API v·ªõi Firestore document ID
			await PackageModel.update(firestoreDocId, dataToUpdate);

			console.log("‚úÖ Package updated successfully");
			alert("‚úÖ C·∫≠p nh·∫≠t g√≥i t·∫≠p th√†nh c√¥ng!");
			
			if (onSave) onSave(form);
		} catch (err) {
			console.error("‚ùå Error updating package:", err);
			setError(err.message || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t g√≥i t·∫≠p.");
		} finally {
			setLoading(false);
		}
	};

	// Ki·ªÉm tra xem tr∆∞·ªùng Discount c√≥ gi√° tr·ªã h·ª£p l·ªá hay kh√¥ng
	const isDiscountEnabled = form.Discount && parseFloat(form.Discount) > 0;

	return (
		<div className="change-package-container">
			<h2>Ch·ªânh s·ª≠a th√¥ng tin g√≥i t·∫≠p</h2>
			<form onSubmit={handleSubmit} className="change-package-form">
				<div className="form-row">
					<label>M√£ g√≥i</label>
					<input name="PackageId" value={form.PackageId} onChange={handleChange} disabled />
				</div>
				<div className="form-row">
					<label>T√™n g√≥i <span className="required">*</span></label>
					<input name="PackageName" value={form.PackageName} onChange={handleChange} required />
				</div>
				<div className="form-row">
					<label>Lo·∫°i g√≥i <span className="required">*</span></label>
					<select
						name="PackageType"
						value={form.PackageType}
						onChange={handleChange}
						required
					>
						<option value="">-- Ch·ªçn lo·∫°i --</option>
						<option value="Personal">C√° nh√¢n</option>
						<option value="PT">Hu·∫•n luy·ªán vi√™n c√° nh√¢n</option>
						<option value="Trial">Th·ª≠ nghi·ªám</option>
						<option value="Promotional">Khuy·∫øn m√£i</option>
					</select>
				</div>
				<div className="form-row">
					<label>Th·ªùi h·∫°n (ng√†y) <span className="required">*</span></label>
					<input
						type="number"
						name="Duration"
						value={form.Duration}
						onChange={handleChange}
						required
						min="1"
						placeholder="Nh·∫≠p s·ªë ng√†y"
					/>
				</div>
				<div className="form-row">
					<label>Gi√° (VNƒê) <span className="required">*</span></label>
					<input
						type="number"
						name="Price"
						value={form.Price}
						onChange={handleChange}
						required
						min="0"
						placeholder="Nh·∫≠p gi√°"
					/>
				</div>
				<div className="form-row">
					<label>S·ªë bu·ªïi t·∫≠p</label>
					<input
						type="number"
						name="NumberOfSession"
						value={form.NumberOfSession}
						onChange={handleChange}
						min="0"
						placeholder="Nh·∫≠p s·ªë bu·ªïi t·∫≠p"
					/>
				</div>
				<div className="form-row">
					<label>Gi·∫£m gi√° (%)</label>
					<input
						type="number"
						name="Discount"
						value={form.Discount}
						onChange={handleChange}
						min="0"
						max="100"
						placeholder="Nh·∫≠p % gi·∫£m gi√° (0‚Äì100)"
					/>
				</div>
				<div className="form-row">
					<label>Ng√†y b·∫Øt ƒë·∫ßu gi·∫£m gi√°</label>
					<input
						type="date"
						name="StartDayDiscount"
						value={form.StartDayDiscount}
						onChange={handleChange}
						disabled={!isDiscountEnabled}
					/>
				</div>
				<div className="form-row">
					<label>Ng√†y k·∫øt th√∫c gi·∫£m gi√°</label>
					<input
						type="date"
						name="EndDayDiscount"
						value={form.EndDayDiscount}
						onChange={handleChange}
						disabled={!isDiscountEnabled}
					/>
				</div>
				<div className="form-row">
					<label>ƒêi·ªÅu ki·ªán s·ª≠ d·ª•ng</label>
					<textarea
						name="UsageCondition"
						value={form.UsageCondition}
						onChange={handleChange}
						rows="3"
						disabled={!isDiscountEnabled}
						placeholder="Nh·∫≠p ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng (n·∫øu c√≥)"
					/>
				</div>
				<div className="form-row">
					<label>M√¥ t·∫£</label>
					<textarea
						name="Description"
						value={form.Description}
						onChange={handleChange}
						rows="3"
						placeholder="Nh·∫≠p m√¥ t·∫£ g√≥i t·∫≠p"
					/>
				</div>
				<div className="form-row">
					<label>Tr·∫°ng th√°i <span className="required">*</span></label>
					<select name="Status" value={form.Status} onChange={handleChange} required>
						<option value="active">ƒêang √°p d·ª•ng</option>
						<option value="inactive">Ng·ª´ng √°p d·ª•ng</option>
					</select>
				</div>

				{error && <p className="error-text" style={{ color: '#EF4444', marginTop: '10px' }}>{error}</p>}

				<div className="form-actions">
					<button type="submit" className="save-btn" disabled={loading}>
						{loading ? "ƒêang l∆∞u..." : "L∆∞u"}
					</button>
					<button type="button" className="cancel-btn" onClick={onCancel} disabled={loading}>
						H·ªßy
					</button>
				</div>
			</form>
		</div>
	);
}
